#GIT COMMANDS
# simple aliases
alias gibr='git branch';
alias gime='git merge master';
alias gipu='git pull';  #down <==
alias gist='git status';

# complex aliases
# git upstream
giup () {
    #If first variable is null, don't go forward
    if [[ -z "$1" ]]; then
        echo "COMMAND INVALID! MUST HAVE AT LEAST ONE VARIABLE!";
    else
        #If second variable is null
        if [[ -z "$2" ]]; then
            #Set the second variable equal to the first one
            set $1 $1;
        fi
        git branch --set-upstream-to=origin/$1 $2;
    fi
}
# git checkout
gico () {
    #If first variable is null, checkout master.
    if [[ -z "$1" ]]; then
        git checkout master;
        git pull;
    else
        git checkout $1;
    fi
}
# git diff
gidf () {
    if [[ -z "$1" ]]; then
        git diff;
    else
        git diff *$1;
    fi
}
# git add
giad () {
    if [[ -z "$1" ]]; then
        echo "COMMAND INVALID! MUST HAVE AT LEAST ONE VARIABLE!";
    else
        git add *$1;
    fi
}
# git push #up   ==>
gipx () {
    git pull;
    git push;
}

# FUTURE GIT BRANCH 1.0
gitest () {
    action='';
    action_where='';
    pointer='';

    if [[ -z "$1" ]]; then
        action='branch';
    else
        for var in "$@"
        do
            if [[ -z $action ]]; then
                if [[ $var = '-new' ]]; then
                    action='checkout -b';
                elif [[ $var = '-delete' ]]; then
                    action=$var;
                fi
            elif [[ $action = '-delete' && -z $action_where ]]; then
                if [[ $var = '-local' ]]; then
                    action_where='-D';
                    action="branch $action_where";
                elif [[ $var = '-origin' ]]; then
                    action_where="origin --delete";
                    action="push $action_where";
                fi
            elif [[ -z $pointer ]]; then
                pointer=$var;
            fi
        done
    fi

    echo "git $action $pointer";
}