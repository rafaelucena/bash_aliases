#GIT COMMANDS
# simple aliases
#alias gime='git merge master';
alias gipu='git pull';  #down <==
alias gist='git status';

# complex aliases

# git commit
# COLOR FIXED
# SUBFUNCTIONS FIXED
# LOCAL VARIABLES FIXED
# PRINT COMMAND FIXED
# COMMENTS @TODO
function gicm () {
    local error='';
    local question='';
    local action='';
    local pointer='';
    local ancillary='';

    local firstAction='';
    local secondAction='';
    local limitAction=2;

    local firstPointer='';
    local secondPointer='';
    local limitPointer=1;

    # Initialize the global variables to be used later
    __gicm_global_setup;

    # First we fill the variables according to the information received
    __gi_global_filter_input "${@}";

    if [ -n "${error}" ]; then
        # @TODO - optimize errors
        echo "${error}";
    else
        __gicm_action_setup;

        if [[ -n "${question}" ]]; then
            local answer='';

            read -p "$(echo -e ${question})" -n 1 -r answer
            echo    # (optional) move to a new line
            if [[ "${answer}" =~ ^[Yy]$ ]]; then
                __gicm_action_cache_branch;
                true;
            else
                __gicm_action_cache_clear;
                return;
            fi
        fi

        # If no errors were found, we keep on to execution passing only the usable variables
        __gi_global_print_execute "${action}" "${pointer}"; #'debug';
    fi
}

# git diff
# COLOR FIXED
# SUBFUNCTIONS FIXED
# LOCAL VARIABLES FIXED
# PRINT COMMAND FIXED
# COMMENTS @TODO
gidf () {
    local action='diff';
    local pointer='';

    if [[ -n "$1" ]]; then
        pointer=$(__gi_file_extension_modifier $1);
    fi

    __gi_print_execute;
}

# git add
# COLOR FIXED
# SUBFUNCTIONS FIXED
# LOCAL VARIABLES FIXED
# PRINT COMMAND FIXED
# COMMENTS @TODO
giad () {
    local action='add';
    local pointer='';

    if [[ -n "$1" ]]; then
        pointer=$(__gi_file_extension_modifier $1);
    else
        echo "COMMAND INVALID! MUST HAVE AT LEAST ONE VARIABLE!";
    fi

    __gi_print_execute;
}

# git push #up   ==>
# COLOR FIXED
# SUBFUNCTIONS FIXED
# LOCAL VARIABLES FIXED
# PRINT COMMAND FIXED
gipx () {
    local action='';

    action='pull';
    __gi_print_execute;

    action='push';
    __gi_print_execute;
}

# GIT BRANCH 3.0
# COLOR FIXED
# SUBFUNCTIONS FIXED
# LOCAL VARIABLES FIXED
# PRINT COMMAND FIXED
# COMMENTS @TODO
function gibr () {
    local error='';
    local question='';
    local action='';
    local pointer='';
    local ancillary='';

    local firstAction='';
    local secondAction='';
    local thirdAction='';
    local limitAction=3;

    local firstPointer='';
    local secondPointer='';
    local limitPointer=1;

    # First we fill the variables according to the information received
    __gi_global_filter_input "${@}";

    if [[ -n "${error}" ]]; then
        # @TODO - optimize errors
        echo "${error}";
    else
        __gi_br_action_setup;

        if [[ -n "${error}" ]]; then
            # @TODO - optimize errors
            echo "${error}";
        else
            if [[ -n "${question}" ]]; then
                local answer='';

                read -p "$(echo -e ${question})" -n 1 -r answer
                echo    # (optional) move to a new line
                if [[ "${answer}" =~ ^[Yy]$ ]]; then
                    true;
                else
                    return;
                fi
            fi

            # If no errors were found, we keep on to execution passing only the usable variables
            __gi_global_print_execute "${action}" "${pointer}";# '' 'debug';
            __gibr_set_branches;
        fi
    fi
}

#
function giui () {
    local error='';
    local action='';
    local pointer='';
    local subtype='';

    local firstAction='';
    local secondAction='';
    local limitAction=2;

    local firstPointer='';
    local secondPointer='';
    local limitPointer=1;

    # First we fill the variables according to the information received
    __gi_global_filter_input "${@}";

    if [[ -n "${error}" ]]; then
        # @TODO - optimize errors
        echo "${error}";
    else
        __giui_action_setup;

        if [[ -n "${error}" ]]; then
            # @TODO - optimize errors
            echo "${error}";
        else
            __gi_global_print_execute "${action}" "${pointer}" "${subtype}";# 'debug';
        fi
    fi
}

#
function gime () {
    local error='';
    local question='';
    local action='';
    local pointer='';
    local subtype='';
    local ancillary='';

    local firstAction='';
    local secondAction='';
    local limitAction=2;

    local firstPointer='';
    local secondPointer='';
    local limitPointer=1;

    # First we fill the variables according to the information received
    __gi_global_filter_input "${@}";

    if [[ -n "${error}" ]]; then
        # @TODO - optimize errors
        echo "${error}";
    else
        __gime_action_setup;

        if [[ -n "${error}" ]]; then
            # @TODO - optimize errors
            echo "${error}";
        else
            if [[ -n "${question}" ]]; then
                local answer='';

                read -p "$(echo -e ${question})" -n 1 -r answer
                echo    # (optional) move to a new line
                if [[ "${answer}" =~ ^[Yy]$ ]]; then
                    true;
                else
                    return;
                fi
            fi

            __gi_global_print_execute "${action}" "${pointer}" "${subtype}";# 'debug';
        fi
    fi
}

#
function gibk () {
    local error='';
    local question='';
    local action='';
    local pointer='';
    local subtype='';

    local firstAction='';
    local secondAction='';
    local limitAction=2;

    local firstPointer='';
    local secondPointer='';
    local limitPointer=1;

    # First we fill the variables according to the information received
    __gi_global_filter_input "${@}";

    if [[ -n "${error}" ]]; then
        # @TODO - optimize errors
        echo "${error}";
    else
        __gibk_action_setup;

        if [[ -n "${error}" ]]; then
            # @TODO - optimize errors
            echo "${error}";
        else
            if [[ -n "${question}" ]]; then
                local answer='';

                read -p "$(echo -e ${question})" -n 1 -r answer
                echo    # (optional) move to a new line
                if [[ "${answer}" =~ ^[Yy]$ ]]; then
                    true;
                else
                    return;
                fi
            fi

            __gi_global_print_execute "${action}" "${pointer}" "${subtype}";# 'debug';
        fi
    fi
}

#
function gilg() {
    local error='';
    local action='';
    local pointer='';
    local subtype='';
    local ancillary='';

    local firstAction='';
    local secondAction='';
    local limitAction=2;

    local firstPointer='';
    local secondPointer='';
    local limitPointer=1;

    # First we fill the variables according to the information received
    __gi_global_filter_input "${@}";

    if [[ -n "${error}" ]]; then
        # @TODO - optimize errors
        echo "${error}";
    else
        __gilg_action_setup;

        if [[ -n "${error}" ]]; then
            # @TODO - optimize errors
            echo "${error}";
        else
            __gi_global_print_execute "${action}" "${pointer}" "${subtype}";# 'debug';
        fi
    fi
}
