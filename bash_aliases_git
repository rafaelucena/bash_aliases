#GIT COMMANDS
# simple aliases
# alias gibr='git branch';
alias gime='git merge master';
alias gipu='git pull';  #down <==
alias gist='git status';

# complex aliases
# git upstream
giup () {
    #If first variable is null, don't go forward
    if [[ -z "$1" ]]; then
        echo "COMMAND INVALID! MUST HAVE AT LEAST ONE VARIABLE!";
    else
        #If second variable is null
        if [[ -z "$2" ]]; then
            #Set the second variable equal to the first one
            set $1 $1;
        fi
        git branch --set-upstream-to=origin/$1 $2;
    fi
}
# git checkout
gico () {
    #If first variable is null, checkout master.
    if [[ -z "$1" ]]; then
        git checkout master;
        git pull;
    else
        git checkout $1;
    fi
}
# git diff
gidf () {
    action="git diff";
    if [[ -z "$1" ]]; then
        echo "$action;";
        $action;
    else
        action=$(transformGitFileAction $1);

        echo "$action;";
        $action;
    fi
}

# git add
giad () {
    action="git add";
    if [[ -z "$1" ]]; then
        echo "COMMAND INVALID! MUST HAVE AT LEAST ONE VARIABLE!";
    else
        action=$(transformGitFileAction $1);

        echo "$action;";
        $action;
    fi
}

transformGitFileAction () {
    hasExtension="(\.\w?)";
    if [[ $1 =~ $hasExtension ]]; then
        action="$action *$1"
    else
        action="$action *$1*";
    fi

    echo "$action";
}

# git push #up   ==>
gipx () {
    action="git pull";
    echo "$action;";
    $action;

    action="git push";
    echo "$action;";
    $action;
}

# GIT BRANCH 2.0
gibr () {
    local action='';
    local pointer='';
    local question='';

    # If we don't have any parameter, I assume we just want to see local branches
    if [[ -z "$1" ]]; then
        action='branch';
    else
        __gi_br_set_command $@;

        # Now I evaluate if it's to delete or not with RegEx
        local isDelete="(-D|--delete)";
        if [[ $action =~ $isDelete ]]; then
            # If it's to delete, then I check if it's local or not
            local isLocal="(-D)";
            local answer='';

            if [[ $action =~ $isLocal ]]; then
                # And now I set the appropriated message for local delete
                question="Are you sure you want to remove $pointer locally_?";
            else
                # And now I set the appropriated message for REMOTE delete
                question="Are you REALLY sure you want to remove $pointer FROM REMOTE_?";
            fi

            read -p "$question" -n 1 -r answer
            echo    # (optional) move to a new line
            if [[ $answer =~ ^[Yy]$ ]]; then
                true;
            else
                return;
            fi
        fi
    fi

    echo "git $action $pointer;";
    git $action $pointer;
}

__gi_br_action_delete_confirm () {
    return 1;
}

gotomap () {
    basepath=${PWD##*/};
    basepath=${basepath,,};
    fullpath=${PWD};

    tag="<local name=\"$basepath\" path=\"$fullpath\"></local>"
    echo "$tag";
}