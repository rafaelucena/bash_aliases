#!/usr/bin/env bash
#
__print_command () {
    local print_command='';

    if [[ -n $pointer ]]; then
        print_command="$(dye cyan)$1$(dye undye) $(dye red)$action$(dye undye) $(dye orange)$pointer$(dye undye);";
    else
        print_command="$(dye cyan)$1$(dye undye) $(dye green)$action$(dye undye);";
    fi

    echo -e "$print_command";
}

__run_command () {
    local command=$1;

    if [[ -n ${pointer} ]]; then
        ${command} ${action} "${pointer}";
    else
        ${command} ${action};
    fi
}

#GIT INTERNAL COMMANDS'
__gi_print_execute () {
    if [[ -n $action ]]; then
        __print_command 'git';

        __run_command 'git';
    fi
}

__gi_file_extension_modifier () {
    local hasExtension='(\.\w?)';
    local pointer='';

    if [[ $1 =~ $hasExtension ]]; then
        pointer="*$1"
    else
        pointer="*$1*";
    fi

    echo "$pointer";
}

__global_print () {
    local print_command='';

    if [[ -n "${3}" ]]; then
        print_command="$(dye cyan)${1}$(dye undye) $(dye red)${2}$(dye undye) $(dye orange)${3}$(dye undye);";
    else
        print_command="$(dye cyan)${1}$(dye undye) $(dye green)${2}$(dye undye);";
    fi

    echo -e "${print_command}";
}

__global_execute () {
    local command="${1}";

    if [[ -n "${3}" ]]; then
        "${command}" ${2} "${3}";
    else
#        set -x
        "${command}" ${2};
#        set +x
    fi
}

############### KEEPING EVERYTHING BEYOND THIS POINT
## GI GLOBAL
function __gi_global_load_params () {
    local continue=0;

    if [[ -n "${1}" ]]; then
        local section="\[${1}\]";
    else
        return '';
    fi

    local sectionPattern='\[\w+\]';
    local parameterPattern='\w+=(''|\w+)';
    while read var
    do
        if [[ "${var}" =~ ${sectionPattern} ]]; then
            if [[ "${var}" =~ ${section} ]]; then
                continue=1;
            else
                continue=0;
            fi
        fi

        if [[ "${continue}" == 1 ]]; then
            if [[ "${var}" =~ ${parameterPattern} ]]; then
                echo ${var};
            fi
        fi
    done < /home/b4b06/test.txt;
}

__gi_global_filter_input () {
    local isParameter='^-\w+';

    local countActions=0;
    local countPointers=0;

    #INHERITED
    local limitAction="${limitAction}";
    local limitPointer="${limitPointer}";

    # Now, if I do have parameters, I will evaluate them and allocate into specific variables
    for input in "${@}"; do
        # And now I check if current variable is a parameter or not
        if [[ "${input}" =~ ${isParameter} ]]; then
            ((countActions++));

            # If it's a parameter, I check if my own action is empty so I won't override it
            if [[ -z "${firstAction}" ]]; then
                firstAction="${input}";
            elif [[ -z "${secondaryAction}" ]]; then
                secondAction="${input}";
            fi
        # If it's not a parameter, then its a pointer to a branch
        else
            ((countPointers++));

            if [[ -z "${firstPointer}" ]]; then
                firstPointer="${input}";
            elif [[ -z "${secondPointer}" ]]; then
                secondPointer="${input}";
            fi
        fi

        if [[ "${countActions}" -gt "${limitAction}" || "${countPointers}" -gt "${limitPointer}" ]]; then
            if [[ "${countActions}" -gt "${limitAction}" && "${countPointers}" -gt "${limitPointer}" ]]; then
                error='Too many arguments';
            elif [[ "${countActions}" -gt "${limitAction}" ]]; then
                error='Too many parameters';
            else
                error='Too many pointers';
            fi
            break;
        fi
    done

    #echo "Actions: ${countActions}, Pointers: ${countPointers}, Error: ${error}";
    #echo "$firstPointer";
}

__gi_global_print_execute () {
    if [[ -n "${1}" ]]; then
        __gi_global_print;

        # for now let's assume that anything sent as a third parameter is the debug trigger
        if [[ -z "${4}" ]]; then
            __gi_global_execute;
        fi
    fi
}

function __gi_global_print () {
    local print_command='';
    local execute='git';

    case "${subtype}" in
        'pipe')
            print_command="$(dye cyan)${execute}$(dye undye) $(dye red)${action}$(dye undye) | $(dye orange)${pointer}$(dye undye)";
            ;;
        *)
            if [[ -n "${pointer}" ]]; then
                print_command="$(dye cyan)${execute}$(dye undye) $(dye red)${action}$(dye undye) $(dye orange)${pointer}$(dye undye)";
            else
                print_command="$(dye cyan)${execute}$(dye undye) $(dye green)${action}$(dye undye)";
            fi
            ;;
    esac

    if [[ "${ancillary}" ]]; then
        print_command="${print_command} ${ancillary}";
    fi

    echo -e "${print_command}";
}

function __gi_global_execute () {
    local execute='git';

    case "${subtype}" in
        'pipe')
            ${execute} ${action} "${ancillary}" | eval ${pointer};
            ;;
        *)
            if [[ -n "${pointer}" ]]; then
                if [[ -n "${ancillary}" ]]; then
                    ${execute} ${action} "${pointer}" ${ancillary};
                else
                    ${execute} ${action} "${pointer}";
                fi
            else
                if [[ -n "${ancillary}" ]]; then
                    ${execute} ${action} ${ancillary};
                else
                    ${execute} ${action};
                fi
            fi
            ;;
    esac
}

## GI_BR FUNCTIONS 3.0
__gi_br_action_setup () {
    case "${firstAction}" in
        # Creating a new branch
        '-n'|'-new')
            # Only ${firstPointer} is necessary here
            __gi_br_action_new "${firstPointer}";
            ;;
        #
        '-m'|'-master')
            __gi_br_action_checkout 'master';
            ;;
        #
        '-l'|'-last')
            __gibr_action_last;
            ;;
        # Listing branches
        '-v'|'-view')
            # Only ${firstAction} is necessary here
            __gi_br_action_list_up "${secondAction}";
            ;;
        '-d'|'-del'|'-delete')
            # ${firstAction} and ${firstPointer} are necessary here
            __gi_br_action_delete_up "${secondAction}" "${firstPointer}";
            ;;
        *)
            # Checking out branches
            if [[ -z "${firstAction}" && -n "${firstPointer}" ]]; then
                # Only ${firstPointer} is necessary here
                __gi_br_action_checkout "${firstPointer}";
            else
                # @TODO - gibr without parameters will output usage
                echo 'eitas';
            fi

            ;;
    esac
}

__gi_br_action_new () {
    if [[ -n "${1}" ]]; then
        action='checkout -b';
        pointer="${1}";

        GIBR_LAST_BRANCH="$(get_git_branch)";
        GIBR_CURRENT_BRANCH=${pointer};
    else
        error='missing pointer';
    fi
}

function __gibr_action_last () {
    if [[ -n "${GIBR_LAST_BRANCH}" ]]; then
        __gi_br_action_checkout "${GIBR_LAST_BRANCH}";
    else
        error='Branch not loaded yet';
    fi
}

__gi_br_action_list_up () {
    action='branch';

    case "${1}" in
        '-l'|'-local'|'-list')
            pointer='-l';
            ;;
        '-r'|'-remote')
            pointer='-r';
            ;;
        '-a'|'-all')
            pointer='-a';
            ;;
    esac
}

__gi_br_action_delete_up () {
    case "${1}" in
        '-l'|'-local'|'')
            action='branch -D';
            __gi_br_helper_pointer "${2}";
            question="Are you sure you want to remove $(dye orange)${pointer}$(dye undye) locally?";

            ;;
        '-o'|'-r'|'-origin'|'-remote')
            action='push origin --delete';
            __gi_br_helper_pointer "${2}" 'detect';
            question="Are you REALLY sure you want to remove $(dye red)${pointer}$(dye undye) FROM REMOTE?";

            ;;
    esac
}

__gi_br_helper_pointer () {
    if [[ -n "${1}" ]]; then
        pointer="${1}";
    elif [[ "${2}" == 'detect' && "$(get_git_branch)" != 'master' ]]; then
        pointer="$(get_git_branch)";
    else
        error='Pointer missing for this operation';
    fi
}

__gi_br_action_checkout () {
    action='checkout';
    pointer="${1}";

    GIBR_LAST_BRANCH="$(get_git_branch)";
    GIBR_CURRENT_BRANCH=${pointer};
}

## GICM FUNCTIONS
function __gicm_global_setup() {
    GICM_COMMIT_PREFIX="${GICM_COMMIT_PREFIX}";
    GICM_COMMIT_PREFIX_BRANCH="${GICM_COMMIT_PREFIX_BRANCH}";
    GICM_COMMIT_LAST="${GICM_COMMIT_LAST}";
    GICM_COMMIT_LAST_BRANCH="${GICM_COMMIT_LAST_BRANCH}";
}

function __gicm_action_setup () {
    local secondAction="${secondAction}";

    case "${secondAction}" in
        '-n')
            __gicm_action_ancillary 'secondAction';
        ;;
    esac

    case "${firstAction}" in
        '-n')
            __gicm_action_ancillary 'firstAction';
        ;;
    esac

    case "${firstAction}" in
        # Create a new commit with the common standard
        '-m'|'-message')
            __gicm_action_commit "${firstPointer}";
            ;;
        #
        '-a'|'-amend')
            __gicm_action_amend;
            ;;
        # Clear all the global variables for the GICM command
        '-c'|'-clear')
            __gicm_action_cache_clear "${firstAction}";
            ;;
        # Set a prefix and commits it at the same time as a base
        '-p'|'-prefix')
            __gicm_action_set_commit_prefix "${firstPointer}";
            ;;
        # Execute the last known commit, if it exists
        '-l'|'-last')
            __gicm_action_get_commit_last;
            ;;
        # View defined global variables for the GICM command
        '-v'|'-view')
            __gicm_action_get_commit_view "${secondAction}";
            ;;
        # Assuming we have a message, we look for a prefix, if it exists, and append to it before commiting.
        *)
            # Super commit reading a prefix if it exists
            if [[ -z "${firstAction}" && -n "${firstPointer}" ]]; then
                __gicm_action_commit_prefix "${firstPointer}";
            else
                # @TODO - gicm without parameters will output usage
                echo 'eitas';
            fi

            ;;
    esac
}

function __gicm_action_ancillary() {
    ancillary='-n';

    case "${1}" in
        'firstAction')
            firstAction='';
        ;;
        'secondAction')
            secondAction='';
        ;;
    esac
}

function __gicm_action_commit() {
    if [ -n "${1}" ]; then
        GICM_COMMIT_LAST="${1}";

        if [ -n "${2}" ]; then
            GICM_COMMIT_LAST_BRANCH="${2}";
        else
            GICM_COMMIT_LAST_BRANCH="$(get_git_branch)";
        fi

        action='commit -m';
        pointer="\"${1}\"";
    else
        error='missing pointer';
    fi

#    echo "${action} ${pointer}";
}

function __gicm_action_amend() {
    action='commit';
    pointer='--amend';
}

function __gicm_action_set_commit_prefix() {
    if [ -n "${1}" ]; then
        GICM_COMMIT_PREFIX="${1}";
        GICM_COMMIT_PREFIX_BRANCH="$(get_git_branch)";

        __gicm_action_commit "${GICM_COMMIT_PREFIX}";
    else
        error='missing pointer';
    fi

#    echo "${GICM_COMMIT_PREFIX}";
}

function __gicm_action_commit_prefix() {
    if [ -n "${1}" ]; then
        local commitMsg='';
        if [[ -n "${GICM_COMMIT_PREFIX}" ]]; then
            commitMsg="${GICM_COMMIT_PREFIX} (${1})";

            if [[ -n "${GICM_COMMIT_PREFIX_BRANCH}" && "${GICM_COMMIT_PREFIX_BRANCH}" != "$(get_git_branch)" ]]; then
                question='The prefix commit was made on another branch, are you sure you want to continue?';
            fi
        else
            commitMsg="${1}";
        fi

        __gicm_action_commit "${commitMsg}";
    else
        error='missing pointer';
    fi
}

function __gicm_action_get_commit_last() {
    if [ -n "${GICM_COMMIT_LAST}" ]; then
        if [[ -n "${GICM_COMMIT_LAST_BRANCH}" && "${GICM_COMMIT_LAST_BRANCH}" != "$(get_git_branch)" ]]; then
            question='The last commit was made on another branch, are you sure you want to continue?';
            __gicm_action_commit "${GICM_COMMIT_LAST}" "${GICM_COMMIT_LAST_BRANCH}";
        else
            __gicm_action_commit "${GICM_COMMIT_LAST}";
        fi
    else
        error='No commits were found';
    fi
}

function __gicm_action_get_commit_view() {
    if [[ -z "${1}" || ("${1}" == '-l' || "${1}" == '-last') ]]; then
        echo "Last commit: ${GICM_COMMIT_LAST} on ${GICM_COMMIT_LAST_BRANCH}";
    fi

    if [[ -z "${1}" || ("${1}" == '-p' || "${1}" == '-prefix') ]]; then
        echo "Prepend commit: ${GICM_COMMIT_PREFIX} on ${GICM_COMMIT_PREFIX_BRANCH}";
    fi
}

function __gicm_action_cache_clear() {
    if [[ (-n "${1}") || ("${GICM_COMMIT_PREFIX_BRANCH}" != "$(get_git_branch)") ]]; then
        GICM_COMMIT_PREFIX='';
        GICM_COMMIT_PREFIX_BRANCH='';
    fi

    if [[ (-n "${1}") || ("${GICM_COMMIT_LAST_BRANCH}" != "$(get_git_branch)") ]]; then
        GICM_COMMIT_LAST='';
        GICM_COMMIT_LAST_BRANCH='';
    fi
}

function __gicm_action_cache_branch() {
    GICM_COMMIT_PREFIX_BRANCH="$(get_git_branch)";
    GICM_COMMIT_LAST_BRANCH="$(get_git_branch)";
}

## GIUI FUNCTIONS
function __giui_action_setup () {
    local secondAction="${secondAction}";

    case "${firstAction}" in
        #
        '-n'|'-no-all')
            #__gicm_action_set_commit_prefix "${firstPointer}";
            ;;
        #
        '-u'|'-unchanged')
            __giui_action_unchanged "${firstPointer}";
            ;;
        #
        '-nu'|'-no-unchanged')
            __giui_action_unchanged "${firstPointer}" '-no';
            ;;
        #
        '-l'|'-list')
            __giui_action_list '^h';
            ;;
        #
        '-lu'|'-list-unchanged')
            __giui_action_list '^h';
            ;;
        #
        *)
            # @TODO - gicm without parameters will output usage
            echo 'eitas';
            ;;
    esac
}

function __giui_action_unchanged () {
    action="update-index -${2}-assume-unchanged";
    pointer="${1}";
}

function __giui_action_list () {
    action='ls-files -v';
    pointer="grep '${1}'";
    subtype='pipe';
}

### GIME functions
function __gime_action_setup () {
    local secondAction="${secondAction}";

    case "${firstAction}" in
        #
        '-m'|'-master')
            __gime_action_merge 'master';
            ;;
        #
        '-a'|'-abort')
            __gime_action_merge '--abort';
            ;;
        #
        '-l'|'-last')
            __gime_action_merge_last;
            ;;
        #
        *)

            if [[ -z "${firstAction}" && -n "${firstPointer}" ]]; then
                __gime_action_merge "${firstPointer}";
            else
                # @TODO - gicm without parameters will output usage
                echo 'eitas';
            fi
            ;;
    esac
}

function __gime_action_merge () {
    action='merge';
    pointer="${1}";
}

function __gime_action_merge_last () {
    if [[ -n "${GIBR_LAST_BRANCH}" ]]; then
        __gime_action_merge ${GIBR_LAST_BRANCH};
    else
        error='Last branch not loaded yet';
    fi
}

### GIBK functions
function __gibk_action_setup () {
    case "${firstAction}" in
        #
        '-v'|'-view')
            __gibk_action_view;
            ;;
        #
        '-d'|'-delete'|'-drop')
            __gibk_action_delete "${firstPointer}";
            ;;
        #
        '-s'|'-save')
            __gibk_action_save;
            ;;
        #
        '-l'|'-last')
            # __gime_action_merge_last;
            ;;
        #
        *)
            if [[ -z "${firstAction}" && -n "${firstPointer}" ]]; then
                 __gibk_action_apply "${firstPointer}";
            else
                # @TODO - gicm without parameters will output usage
                echo 'eitas';
            fi
            ;;
    esac
}

function __gibk_action_view () {
    action='stash list';
}

function __gibk_action_delete () {
    action='stash drop';
    pointer="stash@{${1}}";
    question="Are you sure you want to remove the stash $(dye orange)${pointer}$(dye undye)?";
}

function __gibk_action_save () {
    action='stash save';
    pointer="${firstPointer}";
}

function __gibk_action_apply () {
    action='stash apply';
    pointer="stash@{${1}}";
}