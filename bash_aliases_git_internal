#GIT INTERNAL COMMANDS
__gi_print_execute () {
    if [[ -n $action ]]; then
        __print_command 'git';

        __run_command 'git';

#        echo -e $print_command;
        #$command;
    fi
}

__print_command () {
    local print_command='';

    if [[ -n $pointer ]]; then
        print_command="$(dye cyan)$1$(dye undye) $(dye red)$action$(dye undye) $(dye orange)$pointer$(dye undye);";
    else
        # for some reason, semicolon after $action triggers an error for git branch
        print_command="$(dye cyan)$1$(dye undye) $(dye green)$action$(dye undye);";
    fi

    echo -e "$print_command";
}

__run_command () {
    local command=$1;

    if [[ -n $pointer ]]; then
        $command $action "$pointer";
    else
        $command $action;
    fi
}

__gi_file_extension_modifier () {
    local hasExtension='(\.\w?)';
    local pointer='';

    if [[ $1 =~ $hasExtension ]]; then
        pointer="*$1"
    else
        pointer="*$1*";
    fi

    echo "$pointer";
}

##GIBR FUNCTIONS
__gi_br_set_command () {
    isParameter="^-\w+";

    # Now, if I do have parameters, I will evaluate them one by one (IN ORDER, PLEASE)
    for var in "$@"; do
        # And now I check if current variable is a parameter or not
        if [[ $var =~ $isParameter ]]; then
            # If it's a parameter, I check if my own action is empty so I won't override it
            if [[ -z $action ]]; then
                __gi_br_action $@;
            fi
        # If it's not a parameter, then its a pointer to a branch
        elif [[ -z $pointer ]]; then
            __gi_br_pointer;
        fi
    done
}

__gi_br_set_question () {
    # Now I evaluate if it's to delete or not with RegEx
    local isDelete='(-D|--delete)';

    if [[ $action =~ $isDelete ]]; then
        # If it's to delete, then I check if it's local or not
        local isLocal='(-D)';

        if [[ $action =~ $isLocal ]]; then
            # And now I set the appropriated message for local delete
            question="Are you sure you want to remove $(dye orange)$pointer$(dye undye) locally?";
        else
            # And now I set the appropriated message for REMOTE delete
            question="Are you REALLY sure you want to remove $(dye red)$pointer$(dye undye) FROM REMOTE?";
        fi
    fi
}

__gi_br_pointer() {
    if [[ -z $action ]]; then
        action='checkout';
    fi

    pointer="$var";
}

__gi_br_action() {
    # If it's -new, we create and move to the branch
    local isActionNew='(-new|-n)';
    local isActionDelete='(-delete|-d|-D)';

    if [[ $var =~ $isActionNew ]]; then
        action='checkout -b';
    # If it's -delete, we evaluate further
    elif [[ $var =~ $isActionDelete ]]; then
        __gi_br_action_delete $@;
    fi
}

__gi_br_action_delete () {
    # Now I run the loop again to check for a more specific action
    for deleteVar in "$@"; do
        # If it's -local, I set -D (for now) for deleting even unmerged branches
        local isLocal='(-local|-l)';
        local isRemote='(-origin|-o|-remote|-r)';

        if [[ $deleteVar =~ $isLocal ]]; then
            action='branch -D';
        # If it's -origin, I set the action to use push --delete from the remote server
        elif [[ $deleteVar =~ $isRemote ]]; then
            action='push origin --delete';
        fi
    done

    # If there is no specific information about how to delete, I assume it's local -D (for now)
    if [[ -z $action ]]; then
        action='branch -D';
    fi
}
